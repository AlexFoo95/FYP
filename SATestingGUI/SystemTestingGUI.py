#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Jan 25, 2019 11:54:05 AM +0800  platform: Windows NT
import os
from tkinter.filedialog import askopenfilename
import xlsxwriter
import time
import psycopg2
import sys
from tkinter import messagebox
from Predict import predict
from SentimentDataset import load_data

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import SystemTestingGUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = SA (root)
    SystemTestingGUI_support.init(root, top)
    root.mainloop()

w = None
def create_SA(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = SA (w)
    SystemTestingGUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_SA():
    global w
    w.destroy()
    w = None

class SA:

    def exitsystem(self):
        msg = messagebox.askyesno("Sentiment Analysis", "Are you sure, you want to quit the system?");
        if (msg):
            exit();

    def browseFile(self):
        file = askopenfilename()
        self.Entry2.insert('end', file)

    def predictFile(self):
        file = self.Entry2.get();

        if file.lower().endswith(('.txt', '.csv')):
            conn = psycopg2.connect(host="localhost", database="StockMarket", user="postgres", password="dihi04cuqe")
            cur = conn.cursor()
            times = str(time.strftime("%d%m%Y%H%M%S"))
            filename = "PredictOutput" + times + ".xlsx"
            workbook = xlsxwriter.Workbook(filename)
            worksheet = workbook.add_worksheet()
            worksheet.write(0, 0, 'News Headlines')
            worksheet.write(0, 1, 'Polarity')
            worksheet.write(0, 2, 'Probability')

            row = 1
            col = 0

            train_id_data, token_vocab, label_vocab = load_data()
            with open(file, "r", encoding='utf-8') as f:
                for headlines in f:
                    headlines = headlines.rstrip('\n\r')
                    polarity, probability = predict(token_vocab, label_vocab, headlines)

                    if polarity == 'POS':
                        polarity = 'POSITIVE'

                    if polarity == 'NEU':
                        polarity = 'NEUTRAL'

                    if polarity == 'NEG':
                        polarity = 'NEGATIVE'

                    probability = str(probability)
                    sql = """INSERT INTO public."testing_records"("test_news","test_polarity","test_probability") VALUES ( %s, %s, %s);"""
                    data = (headlines, polarity, probability)
                    cur.execute(sql, data)

                    print(headlines,polarity,probability)
                    worksheet.write(row, col, headlines)
                    worksheet.write(row, col + 1, polarity)
                    worksheet.write(row, col + 2, probability)
                    row += 1

            conn.commit()
            workbook.close()
            os.startfile(filename)



        else:
            messagebox.showinfo("Error", "Please insert the correct format file")

    def predict(self):
        headline = self.Entry1.get();
        if headline == "":
            messagebox.showinfo("Error", "Please insert news headline")

        else:
            conn = psycopg2.connect(host="localhost", database="StockMarket", user="postgres", password="dihi04cuqe")
            cur = conn.cursor()

            train_id_data, token_vocab, label_vocab = load_data()
            polarity, probability = predict(token_vocab, label_vocab, headline)
            if polarity == 'POS':
                polarity = 'POSITIVE'

            if polarity == 'NEU':
                polarity = 'NEUTRAL'

            if polarity == 'NEG':
                polarity = 'NEGATIVE'

            self.Text1.delete('1.0', 'end')
            self.Text2.delete('1.0', 'end')
            self.Text1.insert('end', polarity)
            self.Text2.insert('end', probability)

            probability = str(probability)
            sql = """INSERT INTO public."testing_records"("test_news","test_polarity","test_probability") VALUES ( %s, %s, %s);"""
            data = (headline, polarity, probability)
            cur.execute(sql, data)
            conn.commit()

    def clear(self):
        self.Entry1.delete(0, 'end')

    def clearFile(self):
        self.Entry2.delete(0, 'end')

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("803x539+503+171")
        top.title("News Headline Sentiment Analysis")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.834, rely=0.909, height=33, width=96)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Exit''')
        self.Button3.configure(width=96)
        self.Button3.configure(command=self.exitsystem)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.037, rely=0.056, relheight=0.818
                , relwidth=0.939)
        self.TNotebook1.configure(width=754)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="Sentiment Analysis for File", compound="left"
                ,underline="-1", )
        self.TNotebook1_t0.configure(background="#d9d9d9")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="Sentiment Analysis for News", compound="left"
                ,underline="-1", )
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")

        self.Label4 = tk.Label(self.TNotebook1_t0)
        self.Label4.place(relx=0.04, rely=0.317, height=26, width=146)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''News Headlines File :''')

        self.Entry2 = tk.Entry(self.TNotebook1_t0)
        self.Entry2.place(relx=0.28, rely=0.317,height=34, relwidth=0.645)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(width=484)

        self.Button4 = tk.Button(self.TNotebook1_t0)
        self.Button4.place(relx=0.44, rely=0.585, height=43, width=86)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Clear''')
        self.Button4.configure(width=86)
        self.Button4.configure(command = self.clearFile)

        self.Button5 = tk.Button(self.TNotebook1_t0)
        self.Button5.place(relx=0.627, rely=0.585, height=43, width=80)
        self.Button5.configure(activebackground="#ececec")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Browse''')
        self.Button5.configure(width=80)
        self.Button5.configure(command = self.browseFile)

        self.Button6 = tk.Button(self.TNotebook1_t0)
        self.Button6.place(relx=0.813, rely=0.585, height=43, width=89)
        self.Button6.configure(activebackground="#ececec")
        self.Button6.configure(activeforeground="#000000")
        self.Button6.configure(background="#d9d9d9")
        self.Button6.configure(disabledforeground="#a3a3a3")
        self.Button6.configure(foreground="#000000")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="black")
        self.Button6.configure(pady="0")
        self.Button6.configure(text='''Submit''')
        self.Button6.configure(width=89)
        self.Button6.configure(command=self.predictFile)

        self.Label1 = tk.Label(self.TNotebook1_t1)
        self.Label1.place(relx=0.053, rely=0.122, height=36, width=123)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''News Headline :''')
        self.Label1.configure(width=123)

        self.Entry1 = tk.Entry(self.TNotebook1_t1)
        self.Entry1.place(relx=0.267, rely=0.122,height=34, relwidth=0.659)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=494)

        self.Button1 = tk.Button(self.TNotebook1_t1)
        self.Button1.place(relx=0.667, rely=0.268, height=43, width=76)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Clear''')
        self.Button1.configure(width=76)
        self.Button1.configure(command=self.clear)

        self.Button2 = tk.Button(self.TNotebook1_t1)
        self.Button2.place(relx=0.84, rely=0.268, height=43, width=76)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Submit''')
        self.Button2.configure(width=76)
        self.Button2.configure(command=self.predict)

        self.Frame1 = tk.Frame(self.TNotebook1_t1)
        self.Frame1.place(relx=0.067, rely=0.488, relheight=0.427
                , relwidth=0.873)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(width=655)

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.061, rely=0.171, height=26, width=181)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Sentiment Analysis Result :''')

        self.Text1 = tk.Text(self.Frame1)
        self.Text1.place(relx=0.427, rely=0.171, relheight=0.194, relwidth=0.373)

        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=244)
        self.Text1.configure(wrap='word')

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.046, rely=0.571, height=36, width=232)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Sentiment Analysis Probability :''')
        self.Label3.configure(width=232)

        self.Text2 = tk.Text(self.Frame1)
        self.Text2.place(relx=0.427, rely=0.629, relheight=0.194, relwidth=0.373)

        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=244)
        self.Text2.configure(wrap='word')

if __name__ == '__main__':
    vp_start_gui()





